package drawings;

//Initial code generated by GuiGenie - Copyright (c) 2004 Mario Awad. - http://guigenie.cjb.net

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.Font;

import java.io.File;

import javax.swing.DefaultListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;


/**
 * Provides a JPanel for the Drawing View 
 * 
 * @author      Bill Barry
 * @version     2018-09-09
 */
public class DrawView extends JPanel {

    // Constants
    public static final String REGEX_NON_NEG_INTS   = "[0-9]{0,10}";
    public static final String REGEX_ALL_INTS       = "-?[0-9]{0,10}";

    // Widgets
    private JButton btnAddToList;
    private JButton btnCanvasView;
    private JButton btnDeleteSelected;
    private JButton btnReset;
    private JButton btnShapeColor;
    private JButton btnWriteFile;
    private JCheckBox chkFilled;
    private JCheckBox chkXRand;
    private JCheckBox chkYRand;
    private JComboBox<String> cmbScale;
    private JComboBox<String> cmbShape;
    private JLabel lblCanvasInstruction;
    private JLabel lblDrawInstructions;
    private JLabel lblRepeats;
    private JLabel lblRepRotOut;
    private JLabel lblReptOffX;
    private JLabel lblReptOffY;
    private JLabel lblReptRotate;
    private JLabel lblRotate;
    private JLabel lblRotateOut;
    private JLabel lblScale;
    private JLabel lblShape;
    private JLabel lblXPos;
    private JLabel lblYPos;
    private JSlider sldRepRotate;
    private JSlider sldRotate;
    private JTextField txtRepeats;
    private JTextField txtReptOffX;
    private JTextField txtReptOffY;
    private JTextField txtXPos;
    private JTextField txtYPos;

    private JList<String> lstCanvasInstruction;
    private JList<String> lstDrawInstructions;
    private DefaultListModel<String> canvasListModel;
    private DefaultListModel<String> drawListModel;

    // Other instance variables
    private Color shapeColor;

    
    /**
     * Constructor; sets up the panel and its properties
     */
    public DrawView() {
        shapeColor = null;

        //construct preComponents
        String[] lstDrawInstructionsItems = {};
        String[] cmbShapeItems = {};
        String[] cmbScaleItems = {"5", "10", "25", "50", "75", "100", "150", "200"};
        String[] lstCanvasInstructionItems = {};

        //refer to shared list models
        canvasListModel = InstructGui.getCanvasListModel();
        drawListModel = InstructGui.getDrawListModel();

        //construct components
        shapeColor = null;

        btnAddToList = new JButton("Add to List");
        btnCanvasView = new JButton("Switch to Canvas View");
        btnDeleteSelected = new JButton("Delete Selected");
        btnReset = new JButton("Reset to Defaults");
        btnShapeColor = new JButton("Shape Color...");
        btnWriteFile = new JButton("Write Instruction File...");
        chkFilled = new JCheckBox("Filled?");
        chkXRand = new JCheckBox("Random");
        chkYRand = new JCheckBox("Random");
        cmbScale = new JComboBox<>(cmbScaleItems);
        cmbShape = new JComboBox<>(cmbShapeItems);
        lblCanvasInstruction = new JLabel("Canvas Instruction:");
        lblDrawInstructions = new JLabel("Draw instructions:");
        lblRepeats = new JLabel("Repeats:");
        lblRepRotOut = new JLabel("0");
        lblReptOffX = new JLabel("Offset x:");
        lblReptOffY = new JLabel("Offset y:");
        lblReptRotate = new JLabel("Repeat rotate:");
        lblRotate = new JLabel("Initial rotate:");
        lblRotateOut = new JLabel("0");
        lblScale = new JLabel("Scale:");
        lblShape = new JLabel("Shape:");
        lblXPos = new JLabel("Position x:");
        lblYPos = new JLabel("Position y:");
        sldRepRotate = new JSlider(-360, 360);
        sldRotate = new JSlider(-360, 360);
        txtRepeats = new JTextField(1);
        txtReptOffX = new JTextField(1);
        txtReptOffY = new JTextField(1);
        txtXPos = new JTextField(1);
        txtYPos = new JTextField(1);

        // Tie the lists to the models
        lstCanvasInstruction = new JList<String>(canvasListModel);
        lstDrawInstructions = new JList<String>(drawListModel);

        // Set components properties
        btnAddToList.setToolTipText("Add selections to instruction list");
        btnCanvasView.setToolTipText("Switch from Draw to Canvas view");
        btnDeleteSelected.setToolTipText("Delete selected draw instruction");
        btnReset.setToolTipText("Reset widgets to default settings");
        btnShapeColor.setToolTipText("Select shape color");
        btnWriteFile.setToolTipText("Write instructions to specified file");
        cmbScale.setEditable(true);
        sldRepRotate.setMajorTickSpacing(90);
        sldRepRotate.setMinorTickSpacing(15);
        sldRepRotate.setOrientation(JSlider.HORIZONTAL);
        sldRepRotate.setPaintLabels(false);
        sldRepRotate.setPaintTicks(true);
        sldRotate.setMajorTickSpacing(90);
        sldRotate.setMinorTickSpacing(15);
        sldRotate.setOrientation(JSlider.HORIZONTAL);
        sldRotate.setPaintLabels(false);
        sldRotate.setPaintTicks(true);

        // Set smaller font sizes for lists
        Font lstFont = lstDrawInstructions.getFont();
        lstDrawInstructions.setFont(new Font("Dialog", Font.PLAIN, lstFont.getSize()-1));
        lstCanvasInstruction.setFont(new Font("Dialog", Font.PLAIN, lstFont.getSize()-1));

        // Adjust size and layout
        setPreferredSize(new Dimension(535, 587));
        setLayout(null);

        // Add components to panel
        add(btnAddToList);
        add(btnCanvasView);
        add(btnDeleteSelected);
        add(btnReset);
        add(btnShapeColor);
        add(btnWriteFile);
        add(chkFilled);
        add(chkXRand);
        add(chkYRand);
        add(cmbScale);
        add(cmbShape);
        add(lblCanvasInstruction);
        add(lblDrawInstructions);
        add(lblRepeats);
        add(lblRepRotOut);
        add(lblReptOffX);
        add(lblReptOffY);
        add(lblReptRotate);
        add(lblRotate);
        add(lblRotateOut);
        add(lblScale);
        add(lblShape);
        add(lblXPos);
        add(lblYPos);
        add(lstCanvasInstruction);
        add(lstDrawInstructions);
        add(sldRepRotate);
        add(sldRotate);
        add(txtRepeats);
        add(txtReptOffX);
        add(txtReptOffY);
        add(txtXPos);
        add(txtYPos);

        // Set component bounds
        btnAddToList.setBounds(415, 235, 100, 35);
        btnCanvasView.setBounds(160, 535, 175, 35);
        btnDeleteSelected.setBounds(380, 480, 135, 25);
        btnReset.setBounds(255, 235, 150, 35);
        btnShapeColor.setBounds(315, 20, 120, 25);
        btnWriteFile.setBounds(345, 535, 175, 35);
        chkFilled.setBounds(450, 20, 65, 25);
        chkXRand.setBounds(90, 65, 75, 25);
        chkYRand.setBounds(370, 65, 75, 25);
        cmbScale.setBounds(220, 20, 70, 25);
        cmbShape.setBounds(65, 20, 100, 25);
        lblCanvasInstruction.setBounds(15, 270, 130, 25);
        lblDrawInstructions.setBounds(20, 325, 135, 30);
        lblRepeats.setBounds(20, 105, 60, 25);
        lblRepRotOut.setBounds(475, 190, 55, 25);
        lblReptOffX.setBounds(175, 105, 60, 25);
        lblReptOffY.setBounds(330, 105, 60, 25);
        lblReptRotate.setBounds(20, 190, 85, 25);
        lblRotate.setBounds(20, 150, 85, 25);
        lblRotateOut.setBounds(475, 150, 55, 25);
        lblScale.setBounds(180, 20, 50, 25);
        lblShape.setBounds(20, 20, 45, 25);
        lblXPos.setBounds(20, 65, 65, 25);
        lblYPos.setBounds(300, 65, 70, 25);
        lstCanvasInstruction.setBounds(20, 295, 495, 25);
        lstDrawInstructions.setBounds(20, 355, 495, 120);
        sldRepRotate.setBounds(110, 185, 350, 50);
        sldRotate.setBounds(110, 145, 350, 50);
        txtRepeats.setBounds(85, 105, 70, 25);
        txtReptOffX.setBounds(225, 105, 70, 25);
        txtReptOffY.setBounds(380, 105, 70, 25);
        txtXPos.setBounds(165, 65, 70, 25);
        txtYPos.setBounds(445, 65, 70, 25);

        // Handle other setup
        setDefaults();
        attachListeners(this);
        populateShapes();
    }

    /**
     * Sets defaults for various instance variables and widgets
     */
    private void setDefaults() {
        shapeColor = null;
        btnShapeColor.setBackground(null);
        chkFilled.setSelected(true);
        chkXRand.setSelected(false);
        chkYRand.setSelected(false);
        cmbScale.setSelectedIndex(0);
        sldRepRotate.setValue(0);
        sldRotate.setValue(0);
        txtRepeats.setText("0");
        txtReptOffX.setText("0");
        txtReptOffY.setText("0");
        txtXPos.setEnabled(true);
        txtXPos.setText("0");
        txtYPos.setEnabled(true);
        txtYPos.setText("0");
    }

    /**
     * Adds listeners to all widgets that need them
     * 
     * @param   panel   the JPanel on which the widgets exist
     */
    private void attachListeners(JPanel panel) {

        // Add focus listeners for validation
        txtXPos.addFocusListener(jTextFieldFocusListenerInt);
        txtYPos.addFocusListener(jTextFieldFocusListenerInt);
        txtReptOffX.addFocusListener(jTextFieldFocusListenerInt);
        txtReptOffY.addFocusListener(jTextFieldFocusListenerInt);
        txtRepeats.addFocusListener(jTextFieldFocusListenerInt);

        btnReset.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    setDefaults();
                }
            });

        btnShapeColor.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    JColorChooser clr = new JColorChooser();
                    Color defaultColor =(shapeColor == null) ? Color.BLACK : shapeColor;
                    Color color = clr.showDialog(panel, "Choose Shape Color", defaultColor); 
                    shapeColor =(color == null) ? shapeColor : color;
                    btnShapeColor.setBackground(color);
                }
            }
        );

        chkXRand.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    if (chkXRand.isSelected()) {
                        txtXPos.setText(String.format("%d", Integer.MIN_VALUE));
                        txtXPos.setEnabled(false);
                    } else {
                        txtXPos.setText(String.format("%d", 0));
                        txtXPos.setEnabled(true);
                    }
                }
            }
        );

        chkYRand.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    if (chkYRand.isSelected()) {
                        txtYPos.setText(String.format("%d", Integer.MIN_VALUE));
                        txtYPos.setEnabled(false);
                    } else {
                        txtYPos.setText(String.format("%d", 0));
                        txtYPos.setEnabled(true);
                    }
                }
            }
        );

        sldRotate.addChangeListener(new ChangeListener() {
                public void stateChanged(ChangeEvent event) {
                    lblRotateOut.setText(String.format("%d", sldRotate.getValue()));
                }
            }
        );

        sldRepRotate.addChangeListener(new ChangeListener() {
                public void stateChanged(ChangeEvent event) {
                    lblRepRotOut.setText(String.format("%d", sldRepRotate.getValue()));
                }
            }
        );

        btnDeleteSelected.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    int indexToDelete = lstDrawInstructions.getSelectedIndex();
                    // Don't try to delete if there's nothing selected,
                    // particularly important for empty lists
                    if (indexToDelete != -1) {
                        drawListModel.removeElementAt(indexToDelete);
                        // If you delete the last item, we still want last item selected,
                        // otherwise we want the same position selected
                        if (indexToDelete >= drawListModel.getSize()) {
                            lstDrawInstructions.setSelectedIndex(drawListModel.getSize()-1);
                        } else {
                            lstDrawInstructions.setSelectedIndex(indexToDelete);
                        }
                    }
                }
            }
        );       

        btnWriteFile.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    InstructGui.writeToFile(panel);
                }
            }
        );

        btnCanvasView.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    InstructGui.switchViews(InstructGui.ViewSwitchDirection.DRAW_TO_CANVAS);
                }
            }
        );

        btnAddToList.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    String drawInstr = "";
                    drawInstr += "shape=" + cmbShape.getSelectedItem();
                    drawInstr += ", x=" + txtXPos.getText();
                    drawInstr += ", y=" + txtYPos.getText();

                    //TODO: since scale is now editable, need to only write data for scale >= 0; otherwise omit

                    drawInstr += ", scale=" + cmbScale.getSelectedItem();
                    if (shapeColor != null) {
                        drawInstr += InstructGui.colorToRgb(shapeColor, "");
                    }

                    drawInstr += ", filled=" + chkFilled.isSelected();
                    if (Integer.parseInt(txtRepeats.getText()) > 0) {
                        drawInstr += ", rep=" + txtRepeats.getText();
                        if (Integer.parseInt(txtReptOffX.getText()) != 0) {
                            drawInstr += ", repOffX=" + txtReptOffX.getText();
                        }
                        if (Integer.parseInt(txtReptOffY.getText()) != 0) {
                            drawInstr += ", repOffY=" + txtReptOffY.getText();
                        }
                    }

                    if (sldRotate.getValue() != 0) {
                        drawInstr += ", rotate=" + sldRotate.getValue();
                    }
                    if (sldRepRotate.getValue() != 0) {
                        drawInstr += ", repRot=" + sldRepRotate.getValue();
                    }

                    drawListModel.addElement(drawInstr);
                }
            }
        );

    }

    /**
     * Provides a common listener for text fields that have integer-only requirements.  
     * Use only with JTextField widgets.
     */
    private FocusListener jTextFieldFocusListenerInt = new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                // Make sure this is a text field; casts will blow up, if not
                if (!(e.getSource() instanceof JTextField)) {
                    return;
                }
                
                // Provide convenient "select all" functionality when field receives focus
                JTextField whatField = (JTextField)e.getSource();
                whatField.selectAll();
            };

            @Override
            public void focusLost(FocusEvent e) {

                // Make sure this is a text field; casts will blow up, if not
                if (!(e.getSource() instanceof JTextField)) {
                    return;
                }

                // Do the appropriate validation
                JTextField whatField = (JTextField)e.getSource();
                if (!e.isTemporary()) {
                    String content = whatField.getText();
                    String regex, message;
                    if (whatField == txtRepeats) {      // specific field requires positive integer validation
                        regex = REGEX_NON_NEG_INTS; 
                        message = "Only non-negative integers are allowed in this field";
                    } else {                            // other fields require simple integer validation
                        regex = REGEX_ALL_INTS;
                        message = "Only integers are allowed in this field";
                    }
                    if (!content.matches(regex) ) {
                        JOptionPane.showMessageDialog(null, message, "Data Entry Error", JOptionPane.ERROR_MESSAGE);
                        whatField.selectAll();
                        whatField.grabFocus();
                    }
                }
            }

        };

        /**
         * Scans the shapes folder (within the project folder) for shape files and populates the appropriate widget.
         * If no shape files are present, the widget is unaffected, and may generate unexpected results in instructions.
         */
        private void populateShapes() {
        File shapeDir = new File("shapes");
        File[] folderContents = shapeDir.listFiles();
        if (folderContents == null) {
            // do nothing
        } else {
            for (File aFile : folderContents) {
                String fileName = aFile.getName();
                if (aFile.isFile() && fileName.endsWith(".shp")) {
                    String[] parts = fileName.split("\\.");     // special case regex for splitting at a literal period
                    cmbShape.addItem(parts[0]);
                }
            }
        }
    }

}
