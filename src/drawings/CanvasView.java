package drawings;
//Initial code generated by GuiGenie - Copyright (c) 2004 Mario Awad. - http://guigenie.cjb.net

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Font;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;

/**
 * Provides a JPanel for the Canvas View 
 * 
 * @author      Bill Barry
 * @version     2018-09-09
 */
public class CanvasView extends JPanel {

    // Create widget references
    private JButton btnAddToList;
    private JButton btnWriteFile;
    private JButton btnDeleteSelected;
    private JButton btnDrawView;
    private JButton btnCanvasColor;
    private JButton btnGradColorStart;
    private JButton btnGradColorEnd;

    private JComboBox<String> cmbWidth;
    private JComboBox<String> cmbHeight;
    private JComboBox<String> cmbGradDir;

    private JLabel lblDrawInstructions;
    private JLabel lblWidth;
    private JLabel lblHeight;
    private JLabel lblGradDir;
    private JLabel lblCanvasInstruction;

    private JList<String> lstCanvasInstruction;
    private JList<String> lstDrawInstructions;
    private DefaultListModel<String> canvasListModel;
    private DefaultListModel<String> drawListModel;

    // Other instance variables
    private Color canvasColor, gradStart, gradEnd;

    /**
     * Constructor; sets up the panel and its properties
     */
    public CanvasView() {
        //construct preComponents
        String[] lstDrawInstructionsItems = {};
        String[] cmbWidthItems = {"100", "200", "300", "400", "500", "600", "700", "800", "900", "1000"};
        String[] cmbHeightItems = {"100", "200", "300", "400", "500", "600", "700", "800", "900", "1000"};
        String[] cmbGradDirItems = {"NONE", "Horizontal", "Vertical", "DiagTopLeft", "DiagTopRight"};
        String[] lstCanvasInstructionItems = {};

        canvasColor = null;
        gradStart = null;
        gradEnd = null;

        //refer to shared list models
        canvasListModel = InstructGui.getCanvasListModel();
        drawListModel = InstructGui.getDrawListModel();

        //construct components
        btnAddToList = new JButton("Add to List");
        btnWriteFile = new JButton("Write Instruction File...");
        lblDrawInstructions = new JLabel("Draw instructions:");
        btnDeleteSelected = new JButton("Delete Selected");
        btnDrawView = new JButton("Switch to Draw View");
        lblWidth = new JLabel("Width:");
        lblHeight = new JLabel("Height:");
        cmbWidth = new JComboBox<>(cmbWidthItems);
        cmbHeight = new JComboBox<>(cmbHeightItems);
        btnCanvasColor = new JButton("Canvas Color...");
        cmbGradDir = new JComboBox<>(cmbGradDirItems);
        lblGradDir = new JLabel("Gradient direction:");
        btnGradColorStart = new JButton("Start Color...");
        btnGradColorEnd = new JButton("End Color...");
        lblCanvasInstruction = new JLabel("Canvas Instruction:");

        // Tie the lists to the models
        lstCanvasInstruction = new JList<String>(canvasListModel);
        lstDrawInstructions = new JList<String>(drawListModel);

        //set components properties
        btnAddToList.setToolTipText("Add selections to instruction list");
        btnWriteFile.setToolTipText("Write instructions to specified file");
        btnDeleteSelected.setToolTipText("Delete selected draw instruction");
        btnDrawView.setToolTipText("Switch from Canvas to Draw view");
        btnCanvasColor.setToolTipText("Select canvas background color");
        btnGradColorStart.setToolTipText("Select gradient start color");
        btnGradColorEnd.setToolTipText("Select gradient end color");

        // Set font sizes for lists
        Font lstFont = lstDrawInstructions.getFont();
        lstDrawInstructions.setFont(new Font("Dialog", Font.PLAIN, lstFont.getSize()-1));
        lstCanvasInstruction.setFont(new Font("Dialog", Font.PLAIN, lstFont.getSize()-1));

        //adjust size and set layout
        setPreferredSize(new Dimension(535, 587));
        setLayout(null);

        // Disable context-specific buttons
        btnGradColorStart.setEnabled(false);
        btnGradColorEnd.setEnabled(false);

        //add components
        add(btnAddToList);
        add(btnWriteFile);
        add(lstDrawInstructions);
        add(lblDrawInstructions);
        add(btnDeleteSelected);
        add(btnDrawView);
        add(lblWidth);
        add(lblHeight);
        add(cmbWidth);
        add(cmbHeight);
        add(btnCanvasColor);
        add(cmbGradDir);
        add(lblGradDir);
        add(btnGradColorStart);
        add(btnGradColorEnd);
        add(lstCanvasInstruction);
        add(lblCanvasInstruction);

        //set component bounds
        btnAddToList.setBounds(405, 170, 100, 35);
        btnWriteFile.setBounds(345, 535, 175, 35);
        lstDrawInstructions.setBounds(20, 355, 495, 120);
        lblDrawInstructions.setBounds(20, 325, 135, 30);
        btnDeleteSelected.setBounds(380, 480, 135, 25);
        btnDrawView.setBounds(160, 535, 175, 35);
        lblWidth.setBounds(20, 30, 45, 25);
        lblHeight.setBounds(180, 30, 50, 25);
        cmbWidth.setBounds(65, 30, 100, 25);
        cmbHeight.setBounds(230, 30, 100, 25);
        btnCanvasColor.setBounds(370, 30, 135, 25);
        cmbGradDir.setBounds(130, 110, 100, 25);
        lblGradDir.setBounds(20, 110, 130, 25);
        btnGradColorStart.setBounds(285, 110, 110, 25);
        btnGradColorEnd.setBounds(405, 110, 100, 25);
        lstCanvasInstruction.setBounds(20, 295, 495, 25);
        lblCanvasInstruction.setBounds(15, 270, 130, 25);

        attachListeners(this);
    }

    /**
     * Adds listeners to all widgets that need them
     * 
     * @param   panel   the JPanel on which the widgets exist
     */
    private void attachListeners(JPanel panel) {

        // buttons that activate color choosers
        btnCanvasColor.addActionListener(jButtonColorChooserListener);
        btnGradColorStart.addActionListener(jButtonColorChooserListener);
        btnGradColorEnd.addActionListener(jButtonColorChooserListener);

        btnDrawView.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    InstructGui.switchViews(InstructGui.ViewSwitchDirection.CANVAS_TO_DRAW);
                }
            }
        );

        cmbGradDir.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    String gradDir = cmbGradDir.getSelectedItem().toString();
                    if(gradDir.equals("NONE")) {
                        btnGradColorStart.setEnabled(false);
                        btnGradColorEnd.setEnabled(false);
                    } else {
                        btnGradColorStart.setEnabled(true);
                        btnGradColorEnd.setEnabled(true);
                    }
                }
            }
        );

        btnWriteFile.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    InstructGui.writeToFile(panel);
                }
            }
        );

        btnAddToList.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    String canvasInstr = "";
                    canvasInstr += "width=" + cmbWidth.getSelectedItem() + ", ";
                    canvasInstr += "height=" + cmbHeight.getSelectedItem();
                    if(canvasColor != null) {
                        canvasInstr += InstructGui.colorToRgb(canvasColor, "");
                    }

                    // Handle gradients, if a gradient direction is selected
                    String gradDir = cmbGradDir.getSelectedItem().toString();
                    if(!gradDir.equals("NONE")) {
                        String gradDirOut;
                        switch(gradDir) {
                            case "Horizontal":      gradDirOut = "0";   break;
                            case "Vertical":        gradDirOut = "1";   break;
                            case "DiagTopLeft":     gradDirOut = "2";   break;
                            case "DiagTopRight":    gradDirOut = "3";   break;
                            default:                gradDirOut = "-99"; break;
                        }
                        canvasInstr += ", gradDir=" + gradDirOut;

                        if(gradStart == null)  {
                            if(gradEnd != null) {
                                canvasInstr += InstructGui.colorToRgb(gradEnd, "gradStart");
                            }
                        } else {
                            canvasInstr += InstructGui.colorToRgb(gradStart, "gradStart");
                        }

                        if(gradEnd == null) {
                            if(gradStart != null) {
                                canvasInstr += InstructGui.colorToRgb(gradStart, "gradEnd");
                            }
                        } else {
                            canvasInstr += InstructGui.colorToRgb(gradEnd, "gradEnd");
                        }
                    }

                    // Canvas list can only have one item; clear and update it
                    canvasListModel.clear();
                    canvasListModel.addElement(canvasInstr);
                }
            }
        );

    }

    /**
     * Provides a common listener for buttons that activate color choosers.  
     * Use only with JButton widgets.
     */
    private ActionListener jButtonColorChooserListener = new ActionListener() {
            public void actionPerformed(ActionEvent event) {

                // Ensure this is really a button; if not, bail out
                if (!(event.getSource() instanceof JButton)) {
                    return;
                }
                JButton sourceButton = (JButton)event.getSource();
                Color whichColor = null;

                // Retrieve the appropriate color
                if        (sourceButton == btnCanvasColor       ) {
                    whichColor = canvasColor;
                } else if (sourceButton == btnGradColorStart    ) {
                    whichColor = gradStart;
                } else if (sourceButton == btnGradColorEnd      ) {
                    whichColor = gradEnd;
                } else {
                    return;
                }

                // Let the user choose the color, show chosen color
                JColorChooser clr = new JColorChooser();
                Color defaultColor = (whichColor == null) ? Color.WHITE : whichColor;
                Color chosenColor = clr.showDialog(null, "Choose Color", defaultColor); 
                whichColor = (chosenColor == null) ? whichColor : chosenColor;
                sourceButton.setBackground(whichColor);

                // Put the color back into the right spot
                if          (sourceButton == btnCanvasColor     ) {
                    canvasColor = whichColor;
                } else if   (sourceButton == btnGradColorStart  ) {
                    gradStart   = whichColor;
                } else if   (sourceButton == btnGradColorEnd    ) {
                    gradEnd     = whichColor;
                }

            }
        };
}